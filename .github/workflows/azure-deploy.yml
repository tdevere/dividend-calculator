name: Build and Deploy to Azure App Service

on:
  push:
    branches: [main, master]
    # Only deploy on main branch when specific paths change or deployment files are modified
    paths:
      - 'src/**'
      - 'public/**'
      - 'package*.json'
      - 'next.config.*'
      - 'tailwind.config.*'
      - 'tsconfig.json'
      - '.github/workflows/azure-deploy.yml'
  pull_request:
    branches: [main, master]
    # Build and test PRs but don't deploy
  workflow_dispatch:
    # Allow manual deployment
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging
      force_deploy:
        description: 'Force deploy even without changes'
        required: false
        default: false
        type: boolean
  release:
    types: [published]
    # Deploy on GitHub releases

# Ensure only one deployment runs at a time
concurrency:
  group: azure-deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Build application
        run: npm run build

      - name: Prepare deployment package
        run: |
          mkdir -p deploy-package
          
          # Copy source files needed for Azure build
          cp -r src deploy-package/
          cp -r public deploy-package/
          cp package.json deploy-package/
          cp package-lock.json deploy-package/
          cp next.config.js deploy-package/
          cp tsconfig.json deploy-package/
          cp tailwind.config.ts deploy-package/
          cp postcss.config.mjs deploy-package/
          cp eslint.config.mjs deploy-package/
          cp next-env.d.ts deploy-package/
          
          # Copy built files (optional, Azure will rebuild)
          if [ -d ".next" ]; then
            cp -r .next deploy-package/
          fi
          
          # Create server.js for Azure
          cat > deploy-package/server.js << 'EOF'
          const { createServer } = require('http')
          const { parse } = require('url')
          const next = require('next')
          
          const dev = process.env.NODE_ENV !== 'production'
          const hostname = process.env.WEBSITE_HOSTNAME || 'localhost'
          const port = process.env.PORT || 3000
          
          const app = next({ dev, hostname, port })
          const handle = app.getRequestHandler()
          
          app.prepare().then(() => {
            createServer(async (req, res) => {
              try {
                const parsedUrl = parse(req.url, true)
                await handle(req, res, parsedUrl)
              } catch (err) {
                console.error('Error occurred handling', req.url, err)
                res.statusCode = 500
                res.end('internal server error')
              }
            }).listen(port, (err) => {
              if (err) throw err
              console.log(`> Ready on http://${hostname}:${port}`)
            })
          })
          EOF

      - name: Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: source-package
          path: deploy-package/

  deploy:
    needs: build
    runs-on: ubuntu-latest
    # Only deploy to Azure on:
    # 1. Push to main/master with relevant file changes
    # 2. Manual workflow dispatch
    # 3. GitHub releases
    # 4. Force deploy flag is true
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')) ||
      (github.event_name == 'workflow_dispatch') ||
      (github.event_name == 'release') ||
      (github.event.inputs.force_deploy == 'true')

    steps:
      - name: Deployment Information
        run: |
          echo "ðŸš€ Deploying to Azure App Service"
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Environment: ${{ github.event.inputs.environment || 'production' }}"
          echo "Force Deploy: ${{ github.event.inputs.force_deploy || 'false' }}"
          echo "Commit: ${{ github.sha }}"
      
      - name: Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: source-package
          path: ./deploy

      - name: Create web.config for Azure
        run: |
          cat > deploy/web.config << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="iisnode" path="server.js" verb="*" modules="iisnode"/>
              </handlers>
              <rewrite>
                <rules>
                  <rule name="NodeInspector" patternSyntax="ECMAScript" stopProcessing="true">
                    <match url="^server.js\/debug[\/]?" />
                  </rule>
                  <rule name="StaticContent">
                    <action type="Rewrite" url="public{REQUEST_URI}"/>
                  </rule>
                  <rule name="DynamicContent">
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                    </conditions>
                    <action type="Rewrite" url="server.js"/>
                  </rule>
                </rules>
              </rewrite>
              <security>
                <requestFiltering>
                  <hiddenSegments>
                    <remove segment="bin"/>
                  </hiddenSegments>
                </requestFiltering>
              </security>
              <httpErrors existingResponse="PassThrough" />
              <iisnode watchedFiles="web.config;*.js"/>
            </system.webServer>
          </configuration>
          EOF

      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ./deploy

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Dependency vulnerability scan
        uses: actions/dependency-review-action@v4
